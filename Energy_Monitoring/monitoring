#!/usr/bin/env python3
import json
from http.server import BaseHTTPRequestHandler, HTTPServer
import mysql.connector
import argparse
import logging
import time
import socket

# Initialize logging
logging.basicConfig(filename='monitoring.log', level=logging.INFO, format='%(asctime)s [%(levelname)s]: %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

# Constants
DEFAULT_SQL_HOST = 'localhost'
DEFAULT_SQL_USER = 'root'
DEFAULT_SQL_PASSWORD = 'z'
DEFAULT_SQL_DB = 'phd'
DEFAULT_SQL_TABLE = 'test'
DEFAULT_PORT = 8443

# Parse command-line arguments
parser = argparse.ArgumentParser(description='Start the monitoring server.')
parser.add_argument('-host', default=DEFAULT_SQL_HOST, help=f'MySQL host (default: {DEFAULT_SQL_HOST})')
parser.add_argument('-user', default=DEFAULT_SQL_USER, help=f'MySQL user (default: {DEFAULT_SQL_USER})')
parser.add_argument('-password', default=DEFAULT_SQL_PASSWORD, help=f'MySQL password (default: {DEFAULT_SQL_PASSWORD})')
parser.add_argument('-database', default=DEFAULT_SQL_DB, help=f'MySQL database name (default: {DEFAULT_SQL_DB})')
parser.add_argument('-table', default=DEFAULT_SQL_TABLE, help=f'MySQL table name (default: {DEFAULT_SQL_TABLE})')
parser.add_argument('-port', type=int, default=DEFAULT_PORT, help=f'Port number (default: {DEFAULT_PORT})')

args = parser.parse_args()

# MySQL connection details
mysql_config = {
    "host": args.host,
    "user": args.user,
    "password": args.password,
    "db_name": args.database,
    "table_name": args.table
}

# Define a cache to store host names
host_cache = {}

def get_host_from_ip(ip):
    if ip in host_cache:
        return host_cache[ip]
    
    try:
        host = socket.gethostbyaddr(ip)[0]
        host_cache[ip] = host
        return host
    except socket.herror:
        modified_ip = ip.replace('.', '_') # error handling
        host_cache[ip] = modified_ip
        return modified_ip

def create_database(cursor):
    cursor.execute(f"CREATE DATABASE IF NOT EXISTS {mysql_config['db_name']}")

def create_table(cursor):
    cursor.execute(f"USE {mysql_config['db_name']}")
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {mysql_config['table_name']} (id INT AUTO_INCREMENT PRIMARY KEY, timestamp BIGINT)")

def insert_data(cursor, hostname, value, timestamp):
    cursor.execute(f"USE {mysql_config['db_name']}")
    cursor.execute(f"INSERT INTO {mysql_config['table_name']} (timestamp, {hostname}) VALUES (%s, %s)", (timestamp, value))

def check_and_create_column(cursor, hostname):
    cursor.execute(f"USE {mysql_config['db_name']}")
    cursor.execute(f"SHOW COLUMNS FROM {mysql_config['table_name']} LIKE %s", (hostname,))
    if not cursor.fetchone():
        cursor.execute(f"ALTER TABLE {mysql_config['table_name']} ADD COLUMN {hostname} FLOAT(10,4)")

class RequestHandler(BaseHTTPRequestHandler):
    def _send_response(self, message):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(message.encode())

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        json_data = json.loads(post_data.decode('utf-8'))

        value = json_data.get('value', None)
        timestamp = json_data.get('timestamp', None)

        if timestamp is None:
            timestamp = int(time.time() * 1000) # Get current time in milliseconds
        else:
            try:
                timestamp = int(timestamp)
            except ValueError:
                timestamp = int(time.time() * 1000)

        if value is not None:
            client_address = self.client_address[0]
            hostname = get_host_from_ip(client_address)
            # Connect to MySQL and insert data
            try:
                connection = mysql.connector.connect(
                    host=mysql_config["host"],
                    user=mysql_config["user"],
                    password=mysql_config["password"]
                )
                cursor = connection.cursor()

                create_database(cursor)
                create_table(cursor)
                check_and_create_column(cursor, hostname)
                insert_data(cursor, hostname, value, timestamp)

                connection.commit()

                self._send_response(f"Received value {value} with timestamp {timestamp} from IP address {client_address}")
                print(f"Received value {value} with timestamp {timestamp} from IP address {client_address}")
                logging.info(f"Received value {value} with timestamp {timestamp} from IP address {client_address}")

            except Exception as e:
                self._send_response(f"Error: {e}")
                print(f"Error: {e}")
                logging.error(f"Error: {e}")
            finally:
                cursor.close()
                connection.close()
        else:
            self._send_response(f"Invalid JSON format from IP address {client_address}.")
            print(f"Invalid JSON format from IP address {client_address}.")
            logging.warning(f"Invalid JSON format from IP address {client_address}.")

def run(server_class=HTTPServer, handler_class=RequestHandler):
    server_address = ('', args.port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {args.port}...')
    httpd.serve_forever()

if __name__ == '__main__':
    run()