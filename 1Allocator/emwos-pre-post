#!/usr/bin/env node
// Started using from 25 March 2025
/**
 * EMWOS Pre/Post Script for Job Execution
 * 
 * This script handles the pre and post execution tasks for EMWOS workflow jobs:
 * - PRE: Allocates resources based on execution number and preference, then updates submit files
 * - POST: Releases resources and validates job execution
 * 
 * The script communicates with the EMWOS server to:
 * 1. Request resource allocation with job name, execution number, and performance preference
 * 2. Update job submit files with the allocated resource requirements
 * 3. Release resources after job completion
 * 4. Verify job execution using pegasus-exitcode
 * 
 * Usage:
 * ./emwos-pre-post.sh <pre|post> <submit_file> <execution_number> [preference]
 * 
 * Example:
 * ./emwos-pre-post.sh pre /path/to/job.sub 42 performance
 * ./emwos-pre-post.sh post /path/to/job.sub
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Constants
const SERVER_HOST = 'localhost';
const SERVER_PORT = 8000;
const LOG_FILE = 'emwos-pre-post.log';

const DEFAULT_PREFERENCE = 'balanced';

// Function to log messages
function logMessage(action, jobName, operation, resource, status, additionalInfo = '') {
    const timestamp = Math.floor(Date.now() / 1000);
    const logEntry = `${timestamp}, ${action}, ${jobName}, ${operation}, ${resource}, ${status}, ${additionalInfo}\n`;
    fs.appendFileSync(LOG_FILE, logEntry);
}

// Function to check if a job should be skipped
function shouldSkipJob(jobName) {
    return jobName.startsWith('create_') || jobName.startsWith('stage_in_') || jobName.startsWith('stage_out_');
}

// Function to update the submit file
function updateSubmitFile(submitFile, resource) {
    const content = fs.readFileSync(submitFile, 'utf8');
    const updatedContent = content.replace(/^requirements.*$/m, `requirements = (Name == "${resource}")`);
    fs.writeFileSync(submitFile, updatedContent);
}

// Function to send request to server
function sendRequest(action, jobName, executionNumber = null, preference = null) {
    return new Promise((resolve, reject) => {
        const path = action === 'pre'
            ? `/allocate/${jobName}/${executionNumber}/${preference}`
            : `/release/${jobName}`;

        const options = {
            hostname: SERVER_HOST,
            port: SERVER_PORT,
            path: path,
            method: 'GET',
            // Set timeout to 0 to disable it
            timeout: 0,
            // Keep connection alive
            agent: new http.Agent({
                keepAlive: true,
                timeout: 0
            })
        };
        const startTime = process.hrtime();
        const req = http.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                const endTime = process.hrtime(startTime);
                const timeInMs = (endTime[0] * 1000) + (endTime[1] / 1000000);
                logMessage(action, jobName, 'api-request', '', 'successful',
                    `Received response code ${res.statusCode} from api. I waited for ${timeInMs.toFixed(2)} milliseconds for response.`);
                if (res.statusCode === 200) {
                    resolve(JSON.parse(data));
                } else {
                    reject(new Error(`HTTP ${res.statusCode}: ${data}`));
                }
            });
        });
        req.setTimeout(0);
        req.on('error', (error) => {
            reject(error);
        });
        req.end();
    });
}

// Function to run pegasus-exitcode command
function runPegasusExitcode(submitFile) {
    const jobName = path.basename(submitFile, '.sub');
    const dirName = path.dirname(submitFile);
    const outFile = path.join(dirName, `${jobName}.out`);
    const metaFile = path.join(dirName, `${jobName}.meta`);
    // * Step 1: Check if output file exists
    if (!fs.existsSync(outFile)) {
        throw new Error(`Output file not found: ${outFile}`);
    }
    // * Step 2: run pegasus-exitcode and generate the meta file
    try {
        const output = execSync(`pegasus-exitcode ${outFile}`, { encoding: 'utf8' });
        // return output.trim();
    } catch (error) {
        throw new Error(`pegasus-exitcode failed: ${error.message}`);
    }
    // * Step 3: Check for metadata file
    if (!fs.existsSync(metaFile)) {
        throw new Error(`Metadata file not found: ${metaFile}`);
    }
}

async function main() {
    if (process.argv.length < 3) {
        console.error("Error: Arguments are required.");
        console.error("Usage: node script.js <pre|post> <submit_file> <execution_number> [preference]");
        process.exit(1);
    }

    const action = process.argv[2];
    const submitFile = process.argv[3];
    const executionNumber = process.argv[4];
    // Handle missing or empty preference
    let preference = process.argv[5];
    if (!preference || preference.trim() === '') {
        preference = DEFAULT_PREFERENCE;
    }

    if (action !== 'pre' && action !== 'post') {
        console.error("Error: First argument must be 'pre' or 'post'.");
        process.exit(1);
    }

    if (!submitFile) {
        console.error("Error: Submit file path is required.");
        process.exit(1);
    }

    if (!submitFile.endsWith('.sub')) {
        console.error("Error: Second argument must be a .sub file.");
        process.exit(1);
    }

    if (!fs.existsSync(submitFile)) {
        console.error(`Error: Submit file '${submitFile}' does not exist.`);
        process.exit(1);
    }

    const jobName = path.basename(submitFile, '.sub');

    try {
        if (action === 'pre') {
            // only enforce execution number when we execute pre script
            if (!executionNumber) {
                console.error("Error: Execution number is required for 'pre' action.");
                logMessage(action, jobName, 'error', '', 'failed', `Missing required execution number`);
                process.exit(1);
            }

            if (isNaN(executionNumber) || parseInt(executionNumber) <= 0) {
                console.error("Error: Third argument must be a positive number (execution number).");
                logMessage(action, jobName, 'error', '', 'failed', `Invalid execution number: ${executionNumber}`);
                process.exit(1);
            }

            // Log preference information
            logMessage(action, jobName, 'info', '', 'info', `Using preference: ${preference}`);

            if (shouldSkipJob(jobName)) {
                logMessage(action, jobName, 'skip', '', 'skipped', `skipping for job type at path: ${submitFile}`);
                process.exit(0);
            }

            const result = await sendRequest(action, jobName, executionNumber, preference);
            console.log(result);
            // if we receive any warning then log it
            if (result.warning) logMessage(action, jobName, 'allocate', null, 'warning', `${result.warning}. Update file not updated. Exiting.`);

            const resource = result.resource; // check if api response has a resource.
            if (resource) {
                updateSubmitFile(submitFile, resource);
                logMessage(action, jobName, 'allocate', resource, 'successful',
                    `updated submit file (execution ${executionNumber}, preference ${preference})`);
            }

        } else { // POST action
            try {
                const exitcodeOutput = runPegasusExitcode(submitFile);
                logMessage(action, jobName, 'pegasus-exitcode', '', 'successful', exitcodeOutput);
            } catch (exitcodeError) {
                logMessage(action, jobName, 'pegasus-exitcode', '', 'failed', exitcodeError.message);
            }

            if (shouldSkipJob(jobName)) {
                logMessage(action, jobName, 'skip', '', 'skipped', `sending post release request for job type at path: ${submitFile}`);
                process.exit(0);
            }
            await sendRequest(action, jobName);
            logMessage(action, jobName, 'release', '', 'successful', `completed execution for job ${jobName}`);
        }
    } catch (error) {
        logMessage(action, jobName, action === 'pre' ? 'allocate' : 'release', '', 'failed', error.message);
        console.error(`Error: ${error.message}`);
        process.exit(1);
    }
}

main();