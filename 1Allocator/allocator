#!/usr/bin/env python3
import subprocess
import sys
import os
import shutil
from datetime import datetime
import json
import argparse
import time

script_dir = os.path.dirname(os.path.abspath(__file__))
LOG_CONDOR_STATUS_FILE_NAME = os.path.join(script_dir, 'log_condor_status')
LOG_ALLOCATOR_FILE_NAME = os.path.join(script_dir, 'log_allocator')
masterPass = 'z'

def printHelp():
    script_name = os.path.basename(__file__)
    print(f"Usage: ./{script_name} [options]")
    print("Options:")
    print("  -h, -help        Show this help message and exit.")
    print("  -d, -delete      Delete all generated files.")
    print("  -D               Delete all backup folders.")
    print("  -on <IP or hostname>              Spawn Condor daemon.")
    print("  -off <IP or hostname>             Turn Condor daemon off.")
    print("  -all <action>    Turn all Condor daemons on (action: on) or off (action: off).")
    print("  -config          Specify config file.")
    sys.exit(0)

def readConfigFile(file_path):
    try:
        with open(file_path, 'r') as file:
            config_data = json.load(file)
        return config_data
    except FileNotFoundError:
        print("File not found.")
        sys.exit(1)
    except json.JSONDecodeError:
        print("Invalid JSON format.")
        sys.exit(1)

def processConfig(config_data):
    for node, data in config_data.items():
        ip = data.get('ip')
        alias = data.get('alias')
        info = data.get('info')
        # print(info['maxMemory'])

        if alias=='alpha':
            slot1_cpu = data.get('config', {}).get('slot1', {}).get('cpu')
            # backup_command = f"echo {masterPass} | scp {alias}:/etc/condor/condor_config.local /home/mehul/shared_fs/condor_config.local.bak"
            # subprocess.run(backup_command, shell=True)

            # with open('/home/mehul/shared_fs/condor_config.local', 'a') as file:
            #         file.write(f"\nNUM_SLOTS={slot1_cpu}")

            # Backup the local file
            shutil.copy('/home/mehul/shared_fs/condor_config.local.clean', '/home/mehul/shared_fs/condor_config.local')

            # Create the temp file
            with open(f'/home/mehul/shared_fs/condor_config.local', 'a') as file:
                file.write(f"\nNUM_SLOTS={slot1_cpu}")

            mv_command = f"ssh mehul@{alias} 'sudo -S /usr/bin/mv -t /etc/condor/ /home/mehul/shared_fs/condor_config.local'"
            subprocess.run(mv_command, shell=True)


def createBackupFolder():
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
    backup_folder = os.path.join(script_dir, f'backup_{timestamp}')
    os.makedirs(backup_folder)
    return backup_folder

def backupFiles():
    backup_folder = createBackupFolder()
    if os.path.exists(LOG_ALLOCATOR_FILE_NAME):
        shutil.move(LOG_ALLOCATOR_FILE_NAME, os.path.join(backup_folder, 'log_bk'))
    if os.path.exists(LOG_CONDOR_STATUS_FILE_NAME):
        shutil.move(LOG_CONDOR_STATUS_FILE_NAME, os.path.join(backup_folder, 'status_bk'))

def deleteGeneratedFiles():
    if os.path.exists(LOG_ALLOCATOR_FILE_NAME):
        os.remove(LOG_ALLOCATOR_FILE_NAME)
    if os.path.exists(LOG_CONDOR_STATUS_FILE_NAME):
        os.remove(LOG_CONDOR_STATUS_FILE_NAME)
    print("Generated files deleted.")
    sys.exit(0)

def deleteAllBackupFolders():
    backup_folders = [folder for folder in os.listdir(script_dir) if folder.startswith('backup_') and os.path.isdir(os.path.join(script_dir, folder))]
    for folder in backup_folders:
        shutil.rmtree(os.path.join(script_dir, folder))

def runSshCommand(command, command_name):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    returncode = process.returncode
    stdout_str = stdout.decode('utf-8')
    stderr_str = stderr.decode('utf-8')

    log = f"{command_name} - Return Code: {returncode}\n" \
          f"Log: {stdout_str}\n" \
          f"Error: {stderr_str}\n" \
          f"....\n"

    with open(LOG_ALLOCATOR_FILE_NAME, 'a') as f:
        f.write(log)
    
    # print(f"Command '{command_name}' executed. Log file generated.\n")

def getCondorStatus():
    current_dir = os.path.dirname(os.path.realpath(__file__))
    output_file = os.path.join(current_dir, LOG_CONDOR_STATUS_FILE_NAME)
    command = f"condor_status -master -format \"%s\\n\" MasterIpAddr > {output_file}"
    runSshCommand(command, "getCondorStatus")

def generate_condor_command(input_ip_or_hostname, daemon):
    with open(LOG_CONDOR_STATUS_FILE_NAME, 'r') as file:
        for line in file:
            if input_ip_or_hostname in line:
                parts = line.split("&alias=")
                alias = parts[1].split("&")[0]
                if daemon == 'on':
                    command = f"echo {masterPass} | sudo -S condor_on '{line.strip()}' -startd"
                    remotecommand = f'{command}'
                elif daemon == 'off':
                    command = f"echo {masterPass} | sudo -S condor_off '{line.strip()}' -startd"
                    # print(command)
                    remotecommand = f'{command}'
                else:
                    print('generate condor command [daemon not found]')
                return remotecommand, alias
    return None, None

if __name__ == "__main__":
    if os.path.exists(LOG_ALLOCATOR_FILE_NAME) or os.path.exists(LOG_CONDOR_STATUS_FILE_NAME):
        backupFiles()

    parser = argparse.ArgumentParser(description="EMWOS Condor Cluster Resource ALLOCATOR")

    # Define different arguments
    parser.add_argument('-config', nargs=1, metavar='CONFIG', help="Path to the config JSON file")  
    parser.add_argument('-d', action='store_true', help="Delete all generated files")
    parser.add_argument('-D', action='store_true', help="Delete all backup folders")
    parser.add_argument('-on', nargs=1, metavar='hostname', help="Turn on Condor daemon for the specified hostname")
    parser.add_argument('-off', nargs=1, metavar='hostname', help="Turn off Condor daemon for the specified hostname")
    parser.add_argument('-r', nargs=1, metavar='hostname', help="Restarts/ reconfigures condor daemon on the node")
    parser.add_argument('-all', nargs=1, metavar='daemon_action', help="Turn on/off all Condor daemons")


    args = parser.parse_args()

    if not any(vars(args).values()):
        getCondorStatus()
        parser.print_help()
        sys.exit()

    # Implement logic based on arguments
    if args.config:
        config_file = args.config[0]
        config_data = readConfigFile(config_file)
        processConfig(config_data)
        print("Config processing completed.")
    elif args.d:
        deleteGeneratedFiles()
        pass
    elif args.D:
        deleteAllBackupFolders()
        pass
    elif args.on:
        target = sys.argv[2]
        getCondorStatus()
        command = generate_condor_command(target,'on')
        if command is not None:
            runSshCommand(command, "OnCondorDaemon")
            print(f"[{target}] condor node turned on.")
        else:
            print(f"No matching entry found for {target}")
        pass
    elif args.off:
        target = sys.argv[2]
        getCondorStatus()
        command = generate_condor_command(target,'off')
        if command is not None:
            runSshCommand(command, "OffCondorDaemon")
            print(f"[{target}] condor node turned off.")
        else:
            print(f"No matching entry found for {target}")
        pass
    elif args.r:
        target = sys.argv[2]
        getCondorStatus()
        commandOn = generate_condor_command(target,'on')
        commandOff = generate_condor_command(target,'off')
        if commandOn is not None and commandOff is not None:
            runSshCommand(commandOff, "OffCondorDaemon")
            time.sleep(3)
            runSshCommand(commandOn, "OnCondorDaemon")
            print(f"[{target}] condor node restarted.")
        else:
            print(f"No matching entry found for {target}")
        pass
    elif args.all:
        action = args.all[0]
        getCondorStatus()
        nodes = []
        with open(LOG_CONDOR_STATUS_FILE_NAME, 'r') as file:
            for line in file:
                if '&alias=' in line:
                    parts = line.split("&alias=")
                    alias = parts[1].split("&")[0]
                    nodes.append(alias)

        for node in nodes:
            command = generate_condor_command(node, action)
            if command is not None:
                runSshCommand(command, f"{action.capitalize()}CondorDaemon for {node}")
                print(f"[{node}] condor node turned {action}.")
            else:
                print(f"No matching entry found for {node}")
    else:
        parser.print_help()